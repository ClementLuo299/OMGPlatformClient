\\
Use Case: Login
Iteration: 1
Primary Actor: Existing User
Goal in Context: Allow the existing user to authenticate and gain access to the system's features.
Preconditions:
        1. The system is running and accessible.
        2. The user has an existing account
Trigger: The user attempts to access the system's features.
Scenario:
        1. The user enters their username and password.
        2. The system verifies the credentials against the database.
        3. If valid, the existing user is taken to the main menu.
        4. If the credentials are invalid, the system displays an error message and prompts the user to try again.
Post Conditions: The user is logged in and can access the system's functionalities or receives an error message and remains logged out.
Exceptions:
        1. The user filled in the wrong username and password prompting n error message and for the user to retry.
        2. The system displays a message indicating login is unavailable.
        3. The user's account does not exist and the system prompts the try again. After successive failures it prompts the user to sign up rather.
        4. System timeout or other technical issues.
Priority: High â€“ Logging in is necessary to access other system functionalities.
When Available: Within the first development iteration.
Frequency of Use: Once per session (or as needed if the session times out).
Channel to Actor: The user interacts with the system via the GUI using a keyboard and mouse/touchscreen.
Secondary Actors: The database to verify credentials.
Channel to Secondary Actors: System interacts with the database via database requests.
Open issues:
        1. Should there be a password recovery option?
        2. Should multi-factor authentication be implemented?

--------------------------------------------------------
\\
Use Case: Sign Up
Iteration: 1
Primary Actor: New User
Goal in Context: Allow a new user to create an account.
Preconditions:
        1. The system is powered on and accessible.
        2. The user is on the sign-in page or has chosen to create a new account.
Trigger: The user selects the "Sign Up" option.
Scenario:
        1. The user selects the "Sign Up" option.
        2. The system presents a registration form with fields for username/email, password, and other required information.
        3. The user fills in the form.
        4. The system validates the entered information (e.g., checks for unique username, password strength).
        5. If the information is valid, the system creates a new user account and stores it in the database.
        6. The user is prompted to log in with their new credentials.
Post Conditions: A new user account is created and the user can now log in with the newly created credentials.
Exception:
        1. The username or email already exists.
        2. The password do not meet requirements
        3. There is an error or an issue connecting to the database.
        4. There is an ongoing system timeout or other technical issues.
Priority: High- Sign-up is essential for growing the user base and providing access to new users.
When Available: Within the first development iteration.
Frequency of Use: Once per new user.
Channel to Actor: The user interacts with the system via a graphical user interface (GUI) using a keyboard and mouse/touchscreen.
Secondary Actors: The database for storing user accounts.
Channel to Secondary Actors: The system interacts with the database via database requests.
Open Issues:
        1. Should there be an email verification process?
        2. Should a CAPTCHA be included to prevent bots?

-----------------------------------------------------------------------
\\
Use Case: Forgot Password
Iteration: 1
Primary Actor: Existing User
Goal in Context: Allow the existing user to reset their password .
Preconditions:
       1. The system is powered on and accessible.
       2. The user has an existing account linked to a valid email address.
Trigger: The user clicks on the "Forgot Password" link on the login screen page.
Scenario:
       1. The user selects the "Forgot Password?" option.
       2. The system displays a password recovery form requesting the registered email address (or username).
       3. The user enters their email address and submits the form.
       4. The system verifies if the email is associated with an account.
       5. If the email is valid, the system sends a password reset link to the user's email via the email subsystem stub.
       6. The system displays a confirmation message indicating that reset instructions have been sent.
Post Conditions: The user receives an email containing a password reset link with instructions for creating a new password.
Exception:
     1. If the entered email is not linked to any account, the system displays an error message prompting the user to check their input.
     2. If the email cannot be sent due to network or system issues, the system notifies the user and suggests retrying later.
Priority: Medium- Essential for account recovery and maintaining user access, though not a core gameplay function.
When Available: Within the first development iteration.
Frequency of Use: Infrequent- only used when a user forgets their password..
Channel to Actor: The user interacts with the system via a graphical user interface (GUI) using a keyboard and mouse/touchscreen.
Secondary Actors: The email subsystem stubbed to simulate sending the reset instructions.
Channel to Secondary Actors: N/A
Open Issues:
       1. Should there be a validity period of the reset link?
       2. Should additional security measures (e.g., security questions) before allowing a password reset be implemented?

----------------------------------------------------
\\
Use Case: Games
Iteration: 1
Primary Actor: User
Goal in Context: Allow the user to see all games that can be played.
Preconditions: The user is successfully logged in.
Trigger: The user successfully logged in.
Scenario:
       1. The user successfully logged in.
       2. The system displays a list of games available.
       3. The user browses the list and selects a game to join or test
Post Conditions: The user is able to select a game and be able to play it.
Exceptions:
The user is unable to log in.
There are network connection issues.
There is a system timeout or other technical issues preventing the start of the gaming session.
Priority: High- Being able to see the game library is essential to provide gameplay.
When Available: Within the first iteration.
Frequency of Use: Multiple times per user depending on their engagement.
Channel to Actor: The user interacts with the system via a graphical user interface (GUI) using a keyboard and mouse/touchscreen.
Secondary Actors: Game Server for managing game sessions and matchmaking.
Channel to Secondary Actors: System interacts with the game server via network communication.
Open Issues: N/A

--------------------------------------------------
Use Case: Play A Game
Iteration: 1
Primary Actor: User
Goal in Context: Allow the user to join a game session.
Preconditions: The user is logged in and selected a game to play.
Trigger: The user selected a game to play.
Scenario:
        1. The user selects the game to play.
        2. The system adds the user to the selected game session.
        3. The system matches the player to someone of a similar skill base.
        4. The user is taken to the game interface.
Post Conditions: The user is added to the selected game session and can play the game.
Exceptions:
        1. There are no active game sessions available.
        2. The selected game session is full.
        3. There are network connection issues.
        4. There is a system timeout or other technical issues preventing the start of the gaming session.
Priority: High- Joining a game is a core functionality for multiplayer interaction.
When Available: Within the first iteration.
Frequency of Use: Multiple times per user depending on their engagement.
Channel to Actor: The user interacts with the system via a graphical user interface (GUI) using a keyboard and mouse/touchscreen.
Secondary Actors: Game Server for managing game sessions and matchmaking.
Channel to Secondary Actors: System interacts with the game server via network communication.
Open Issues:
        1. Should there be requirements (e.g., rank, invite-only) to join certain games?
        2. What happens if the game starts while the user is joining?

--------------------------------------------------
\\
Use Case: Game Chat
Iteration: 1
Primary Actor: User
Goal in Context: Allow users to communicate with each other during a game session.
Preconditions: The user is logged in and has successfully joined a game session.
Trigger: The user wants to send a message to other players.
Scenario:
       1. The user selected a game to play from the library.
       2. The user successfully joined a game session.
       3. The user has access to the chat interface.
       4. The user types a message.
       5. The user sends the message to his opponent(s).
       5. The message is displayed to all players in the game session.
Post Conditions: The message is sent and displayed to other players.
Exceptions:
       1. There are network and connection issues the user is facing.
       There is a system timeout or other technical issues and difficulties.
Priority: Medium- Game chat enhances social interaction and communication during gameplay, but is not needed for gameplay.
When Available: Within the first iteration.
Frequency of Use: Multiple times per user during a game session.
Channel to Actor: The user interacts with the system via a graphical user interface (GUI) using a keyboard and mouse/touchscreen.
Secondary Actors: The game server for relaying chat messages.
Channel to Secondary Actors: System interacts with the game server via network communication.
Open Issues:
       1. Should private messages or voice chat be implemented in future iterations?
       2. Should there be filters for inappropriate or offensive words and terms?

--------------------------------------------------
\\
Use Case: Leaderboard
Iteration: 1
Primary Actor: User
Goal in Context: Allow the user to view the leaderboard and see player rankings.
Preconditions: The user is successfully logged in.
Trigger: The user clicked on the â€˜Leaderboardâ€™ button.
Scenario:
       1. The user successfully logged in.
       2. The user clicks on the â€˜Leaderboard buttonâ€™.
       3. The system retrieves the leaderboard data from the database.
       4. The system displays the leaderboard with player rankings.
Post Conditions: The user is able to view the Leaderboard with up-to-date ranking.
Exceptions:
       1. The Leaderboard data are not available due to database connection error, database error, and a system timeout.
Priority: Medium - Viewing the leaderboard can enhance competition and engagement but it is not mandatory for gameplay.
Frequency of Use: Multiple times per user depending on their interest.
Channel to Actor: The user interacts with the system via a graphical user interface (GUI) using a keyboard and mouse/touchscreen.
Secondary Actors: The database for player ranking information.
Channel to Secondary Actors: System interacts with the database via database requests.
Open Issues:
       1. Should there be filtering or sorting options for different categories for the leaderboard?

--------------------------------------------------
\\
Use Case: Settings
Iteration: 1
Primary Actor: User
Goal in Context: Allow users to configure system and game preferences.
Preconditions:
        1.The user is logged in.
Trigger: The user selects "Settings" from the main menu.
Scenario:
        1.The user selects "Settings."
        2.The system displays available options(audio, controls, graphics,  notifications).
        3.The user modifies the settings and confirms changes.
        4.The system saves the new settings.
Post Conditions:
        1.The new settings are applied successfully.
Exceptions:
        1.The system fails to save changes due to a technical issue.
        2.The user cancels changes before saving.
Priority: Medium â€“ Enhances user experience.
When Available: Within the first development iteration.
Frequency of Use: Occasionally.
Channel to Actor: GUI interface via keyboard and mouse/touchscreen.
Secondary Actors: The database (to store user preferences).
Channel to Secondary Actors: System interacts with the database via queries.
Open Issues:
        1.Should settings be stored locally or in the cloud?
        2.Should there be a reset-to-default option?

--------------------------------------------------
\\
Use Case: Profile
Iteration: 1
Primary Actor: User
Goal in Context:  Allow users to view and update their profile information.
Preconditions:
        1.The user is logged in.
Trigger: The user selects "Profile" from the main menu.
Scenario:
        1.The user selects "Profile."
        2.The system retrieves profile data from the database.
        3.The system displays profile details (username, avatar, game stats, etc.)
        4.The user updates the information if desired.
        5.The system saves the changes.

Post Conditions:
        1.The userâ€™s profile is updated successfully.
Exceptions:
        1.The system cannot retrieve or save profile data due to technical issues.
        2.The user enters invalid data (e.g., username already taken).
Priority: Medium â€“ Enhances user experience.
When Available: Within the first development iteration.
Frequency of Use: Occasionally.
Channel to Actor: GUI interface via keyboard and mouse/touchscreen.
Secondary Actors: The database (to store user preferences).
Channel to Secondary Actors: System interacts with the database via queries.
Open Issues:
        1.Should users be able to delete their profile?
        2.Should profile updates require verification?
        
--------------------------------------------------
\\
Use Case: Leaderboard
Iteration: 1
Primary Actor: User
Goal in Context: Display the top players based on performance metrics.
Preconditions:
        1.The user is logged in.
        2.The system has recorded game statistics.
Trigger: The user selects "Leaderboard" from the main menu.
Scenario:
        1.The user selects "Leaderboard."
        2.The system retrieves player rankings from the database.
        3.The system displays the leaderboard with rankings, scores, and player names.
Post Conditions:
        1.The leaderboard is displayed successfully.
        2.If unavailable, an error message is shown.
Exceptions:
        1.The system cannot retrieve leaderboard data due to a database issue.
        2.No leaderboard data exists yet.
Priority: Medium â€“ Enhances competitiveness and engagement.
When Available: Within the first development iteration.
Frequency of Use: Frequently.
Channel to Actor: GUI interface via keyboard and mouse/touchscreen.
Secondary Actors: The database (to retrieve rankings).
Channel to Secondary Actors: System interacts with the database via queries
Open Issues:
        1.Should the leaderboard display only friends or all players?
        2.Should there be filters for different game modes?

--------------------------------------------------
\\

Use Case: Game History
Iteration: 1
Primary Actor: User
Goal in Context: Allow users to view their past game results.
Preconditions:
        1.The user is logged in.
        2.The system has recorded game history.
Trigger: The user selects "Game History" from the menu.
Scenario:
        1.The user selects "Game History."
        2.The system retrieves past matches from the database.
        3.The system displays details such as game type, opponents, scores, and outcomes.
Post Conditions:
        1.The user's past game results are displayed.
        2.If no history is available, a message is shown.
Exceptions:
        1.The system fails to retrieve game history due to database issues.
        2.No recorded game history exists for the user.
Priority: Medium â€“ Helps users track progress.
When Available: Within the first development iteration.
Frequency of Use: Occasionally.
Channel to Actor: GUI interface via keyboard and mouse/touchscreen.
Secondary Actors: The database (to retrieve past results).
Channel to Secondary Actors: System interacts with the database via queries.
Open Issues:
        1.Should users be able to delete game history?
        2.Should detailed statistics be shown per game?

--------------------------------------------------
\\
Use Case: Logout
Iteration: 1
Primary Actor: User
Goal in Context: Allow users to securely end their session.
Preconditions:
        1.The user is logged in.
Trigger: The user selects "Logout."
Scenario:
        1.The user selects "Logout."
        2.The system asks for confirmation.
        3.The user confirms logout.
        4.The system ends the session and redirects the user to the login screen.
Post Conditions:
        1.The user is logged out and must log in again to access features.
Exceptions:
        1.The system fails to end the session due to a technical issue.
Priority: High â€“ Ensures security.
When Available: Within the first development iteration.
Frequency of Use: Once per session.
Channel to Actor: GUI interface via keyboard and mouse/touchscreen.
Secondary Actors: The database (to update session status).
Channel to Secondary Actors: System interacts with the database via queries.
Open Issues:
        1.Should there be an option to stay logged in?

--------------------------------------------------
\\
Use Case: Quit Game
Iteration: 1
Primary Actor: User
Goal in Context: Allow users to exit the game application.
Preconditions:
        1.The system is running.
Trigger: The user selects "Quit Game."
Scenario:
        1.The user selects "Quit Game" from the menu.
        2.The system prompts for confirmation.
        3.The user confirms, and the system closes the application.
Post Conditions:
        1.The application exits successfully.
Exceptions:
        1.The system fails to close due to an error.
        2.The user cancels the quit action before confirming.
Priority: High â€“ Essential for user control.
When Available: Within the first development iteration.
Frequency of Use: Occasionally.
Channel to Actor: GUI interface via keyboard and mouse/touchscreen.
Secondary Actors: None.
Channel to Secondary Actors: None.
Open Issues:
        1.Should there be a warning if the user quits with unsaved progress?

--------------------------------------------------

